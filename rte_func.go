// generate handler wrappers which avoid allocs
// do not edit this file!
package rte

import (
	"net/http"
)

func Func1(method, path string, f func(w http.ResponseWriter, r *http.Request, p0 string)) Route {
	return Wrap(method, path, func1(f))
}

type func1 func(w http.ResponseWriter, r *http.Request, p0 string)

func (f func1) Wrap(segIdxes []int) (http.HandlerFunc, error) {
	if len(segIdxes) != 1 {
		return nil, WrongNumParams
	}

	return func(w http.ResponseWriter, r *http.Request) {
		var segs [1]string
		findNSegments(r.URL.Path, segIdxes[:], segs[:])
		f(w, r, segs[0])
	}, nil
}

func Func2(method, path string, f func(w http.ResponseWriter, r *http.Request, p0, p1 string)) Route {
	return Wrap(method, path, func2(f))
}

type func2 func(w http.ResponseWriter, r *http.Request, p0, p1 string)

func (f func2) Wrap(segIdxes []int) (http.HandlerFunc, error) {
	if len(segIdxes) != 2 {
		return nil, WrongNumParams
	}

	return func(w http.ResponseWriter, r *http.Request) {
		var segs [2]string
		findNSegments(r.URL.Path, segIdxes[:], segs[:])
		f(w, r, segs[0], segs[1])
	}, nil
}

func Func3(method, path string, f func(w http.ResponseWriter, r *http.Request, p0, p1, p2 string)) Route {
	return Wrap(method, path, func3(f))
}

type func3 func(w http.ResponseWriter, r *http.Request, p0, p1, p2 string)

func (f func3) Wrap(segIdxes []int) (http.HandlerFunc, error) {
	if len(segIdxes) != 3 {
		return nil, WrongNumParams
	}

	return func(w http.ResponseWriter, r *http.Request) {
		var segs [3]string
		findNSegments(r.URL.Path, segIdxes[:], segs[:])
		f(w, r, segs[0], segs[1], segs[2])
	}, nil
}

func Func4(method, path string, f func(w http.ResponseWriter, r *http.Request, p0, p1, p2, p3 string)) Route {
	return Wrap(method, path, func4(f))
}

type func4 func(w http.ResponseWriter, r *http.Request, p0, p1, p2, p3 string)

func (f func4) Wrap(segIdxes []int) (http.HandlerFunc, error) {
	if len(segIdxes) != 4 {
		return nil, WrongNumParams
	}

	return func(w http.ResponseWriter, r *http.Request) {
		var segs [4]string
		findNSegments(r.URL.Path, segIdxes[:], segs[:])
		f(w, r, segs[0], segs[1], segs[2], segs[3])
	}, nil
}

func Func5(method, path string, f func(w http.ResponseWriter, r *http.Request, p0, p1, p2, p3, p4 string)) Route {
	return Wrap(method, path, func5(f))
}

type func5 func(w http.ResponseWriter, r *http.Request, p0, p1, p2, p3, p4 string)

func (f func5) Wrap(segIdxes []int) (http.HandlerFunc, error) {
	if len(segIdxes) != 5 {
		return nil, WrongNumParams
	}

	return func(w http.ResponseWriter, r *http.Request) {
		var segs [5]string
		findNSegments(r.URL.Path, segIdxes[:], segs[:])
		f(w, r, segs[0], segs[1], segs[2], segs[3], segs[4])
	}, nil
}
