// generate handler wrappers which avoid allocs
// do not edit this file!
package rte

import (
	"net/http"

	"strconv"
)

func FuncS1(
	method,
	path string,
	f func(
		w http.ResponseWriter,
		r *http.Request,
		s0 string,
	),
) Route {
	return Wrap(method, path, funcS1(f))
}

type funcS1 func(
	w http.ResponseWriter,
	r *http.Request,
	s0 string,
)

func (f funcS1) Wrap(segIdxes []int) (http.HandlerFunc, error) {
	if len(segIdxes) != 1 {
		return nil, WrongNumParams
	}

	return func(w http.ResponseWriter, r *http.Request) {
		var segs [1]string
		findNSegments(r.URL.Path, segIdxes[:], segs[:])

		f(
			w,
			r,
			segs[0],
		)
	}, nil
}

func FuncS2(
	method,
	path string,
	f func(
		w http.ResponseWriter,
		r *http.Request,
		s0, s1 string,
	),
) Route {
	return Wrap(method, path, funcS2(f))
}

type funcS2 func(
	w http.ResponseWriter,
	r *http.Request,
	s0, s1 string,
)

func (f funcS2) Wrap(segIdxes []int) (http.HandlerFunc, error) {
	if len(segIdxes) != 2 {
		return nil, WrongNumParams
	}

	return func(w http.ResponseWriter, r *http.Request) {
		var segs [2]string
		findNSegments(r.URL.Path, segIdxes[:], segs[:])

		f(
			w,
			r,
			segs[0],

			segs[1],
		)
	}, nil
}

func FuncS3(
	method,
	path string,
	f func(
		w http.ResponseWriter,
		r *http.Request,
		s0, s1, s2 string,
	),
) Route {
	return Wrap(method, path, funcS3(f))
}

type funcS3 func(
	w http.ResponseWriter,
	r *http.Request,
	s0, s1, s2 string,
)

func (f funcS3) Wrap(segIdxes []int) (http.HandlerFunc, error) {
	if len(segIdxes) != 3 {
		return nil, WrongNumParams
	}

	return func(w http.ResponseWriter, r *http.Request) {
		var segs [3]string
		findNSegments(r.URL.Path, segIdxes[:], segs[:])

		f(
			w,
			r,
			segs[0],

			segs[1],

			segs[2],
		)
	}, nil
}

func FuncI1(
	method,
	path string,
	f func(
		w http.ResponseWriter,
		r *http.Request,
		i0 int64,
	),
) Route {
	return Wrap(method, path, funcI1(f))
}

type funcI1 func(
	w http.ResponseWriter,
	r *http.Request,
	i0 int64,
)

func (f funcI1) Wrap(segIdxes []int) (http.HandlerFunc, error) {
	if len(segIdxes) != 1 {
		return nil, WrongNumParams
	}

	return func(w http.ResponseWriter, r *http.Request) {
		var segs [1]string
		findNSegments(r.URL.Path, segIdxes[:], segs[:])

		i0, err := strconv.ParseInt(segs[0], 10, 64)
		if err != nil {
			panic(err)
		}

		f(
			w,
			r,
			i0,
		)
	}, nil
}

func FuncI2(
	method,
	path string,
	f func(
		w http.ResponseWriter,
		r *http.Request,
		i0, i1 int64,
	),
) Route {
	return Wrap(method, path, funcI2(f))
}

type funcI2 func(
	w http.ResponseWriter,
	r *http.Request,
	i0, i1 int64,
)

func (f funcI2) Wrap(segIdxes []int) (http.HandlerFunc, error) {
	if len(segIdxes) != 2 {
		return nil, WrongNumParams
	}

	return func(w http.ResponseWriter, r *http.Request) {
		var segs [2]string
		findNSegments(r.URL.Path, segIdxes[:], segs[:])

		i0, err := strconv.ParseInt(segs[0], 10, 64)
		if err != nil {
			panic(err)
		}

		i1, err := strconv.ParseInt(segs[1], 10, 64)
		if err != nil {
			panic(err)
		}

		f(
			w,
			r,
			i0,
			i1,
		)
	}, nil
}

func FuncI3(
	method,
	path string,
	f func(
		w http.ResponseWriter,
		r *http.Request,
		i0, i1, i2 int64,
	),
) Route {
	return Wrap(method, path, funcI3(f))
}

type funcI3 func(
	w http.ResponseWriter,
	r *http.Request,
	i0, i1, i2 int64,
)

func (f funcI3) Wrap(segIdxes []int) (http.HandlerFunc, error) {
	if len(segIdxes) != 3 {
		return nil, WrongNumParams
	}

	return func(w http.ResponseWriter, r *http.Request) {
		var segs [3]string
		findNSegments(r.URL.Path, segIdxes[:], segs[:])

		i0, err := strconv.ParseInt(segs[0], 10, 64)
		if err != nil {
			panic(err)
		}

		i1, err := strconv.ParseInt(segs[1], 10, 64)
		if err != nil {
			panic(err)
		}

		i2, err := strconv.ParseInt(segs[2], 10, 64)
		if err != nil {
			panic(err)
		}

		f(
			w,
			r,
			i0,
			i1,
			i2,
		)
	}, nil
}

func FuncU1(
	method,
	path string,
	f func(
		w http.ResponseWriter,
		r *http.Request,
		u0 uint64,
	),
) Route {
	return Wrap(method, path, funcU1(f))
}

type funcU1 func(
	w http.ResponseWriter,
	r *http.Request,
	u0 uint64,
)

func (f funcU1) Wrap(segIdxes []int) (http.HandlerFunc, error) {
	if len(segIdxes) != 1 {
		return nil, WrongNumParams
	}

	return func(w http.ResponseWriter, r *http.Request) {
		var segs [1]string
		findNSegments(r.URL.Path, segIdxes[:], segs[:])

		u0, err := strconv.ParseUint(segs[0], 10, 64)
		if err != nil {
			panic(err)
		}

		f(
			w,
			r,
			u0,
		)
	}, nil
}

func FuncU2(
	method,
	path string,
	f func(
		w http.ResponseWriter,
		r *http.Request,
		u0, u1 uint64,
	),
) Route {
	return Wrap(method, path, funcU2(f))
}

type funcU2 func(
	w http.ResponseWriter,
	r *http.Request,
	u0, u1 uint64,
)

func (f funcU2) Wrap(segIdxes []int) (http.HandlerFunc, error) {
	if len(segIdxes) != 2 {
		return nil, WrongNumParams
	}

	return func(w http.ResponseWriter, r *http.Request) {
		var segs [2]string
		findNSegments(r.URL.Path, segIdxes[:], segs[:])

		u0, err := strconv.ParseUint(segs[0], 10, 64)
		if err != nil {
			panic(err)
		}

		u1, err := strconv.ParseUint(segs[1], 10, 64)
		if err != nil {
			panic(err)
		}

		f(
			w,
			r,
			u0,
			u1,
		)
	}, nil
}

func FuncU3(
	method,
	path string,
	f func(
		w http.ResponseWriter,
		r *http.Request,
		u0, u1, u2 uint64,
	),
) Route {
	return Wrap(method, path, funcU3(f))
}

type funcU3 func(
	w http.ResponseWriter,
	r *http.Request,
	u0, u1, u2 uint64,
)

func (f funcU3) Wrap(segIdxes []int) (http.HandlerFunc, error) {
	if len(segIdxes) != 3 {
		return nil, WrongNumParams
	}

	return func(w http.ResponseWriter, r *http.Request) {
		var segs [3]string
		findNSegments(r.URL.Path, segIdxes[:], segs[:])

		u0, err := strconv.ParseUint(segs[0], 10, 64)
		if err != nil {
			panic(err)
		}

		u1, err := strconv.ParseUint(segs[1], 10, 64)
		if err != nil {
			panic(err)
		}

		u2, err := strconv.ParseUint(segs[2], 10, 64)
		if err != nil {
			panic(err)
		}

		f(
			w,
			r,
			u0,
			u1,
			u2,
		)
	}, nil
}

func FuncS1I2(
	method,
	path string,
	f func(
		w http.ResponseWriter,
		r *http.Request,
		s0 string,

		i1, i2 int64,
	),
) Route {
	return Wrap(method, path, funcS1I2(f))
}

type funcS1I2 func(
	w http.ResponseWriter,
	r *http.Request,
	s0 string,
	i1, i2 int64,
)

func (f funcS1I2) Wrap(segIdxes []int) (http.HandlerFunc, error) {
	if len(segIdxes) != 3 {
		return nil, WrongNumParams
	}

	return func(w http.ResponseWriter, r *http.Request) {
		var segs [3]string
		findNSegments(r.URL.Path, segIdxes[:], segs[:])

		i1, err := strconv.ParseInt(segs[1], 10, 64)
		if err != nil {
			panic(err)
		}

		i2, err := strconv.ParseInt(segs[2], 10, 64)
		if err != nil {
			panic(err)
		}

		f(
			w,
			r,
			segs[0],

			i1,
			i2,
		)
	}, nil
}
